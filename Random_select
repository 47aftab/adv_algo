#include <iostream>
#include <cstdlib>

using namespace std;

// Function to swap two elements
void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}

// Partition function for QuickSort
int partition(int A[], int l, int r) {
    int pivot = A[r];
    int i = l - 1;
    for (int j = l; j < r; j++) {
        if (A[j] <= pivot) {
            i++;
            swap(A[i], A[j]);
        }
    }
    swap(A[i + 1], A[r]);
    return i + 1;
}

// Randomized partition function
int random_partition(int A[], int l, int r) {
    int i = l + rand() % (r - l + 1);
    swap(A[i], A[r]);
    return partition(A, l, r);
}

// Randomized Select function to find the i-th smallest element
int RandomizedSelect(int A[], int p, int r, int i) {
    if (p == r) {
        return A[p];
    }

    int q = random_partition(A, p, r);
    int k = q - p + 1; // Number of elements in the left partition including pivot

    if (i == k) {
        // The pivot element is the i-th smallest
        return A[q];
    } else if (i < k) {
        // Look for the i-th smallest in the left partition
        return RandomizedSelect(A, p, q - 1, i);
    } else {
        // Look for the (i-k)-th smallest in the right partition
        return RandomizedSelect(A, q + 1, r, i - k);
    }
}

int main() {
    int n, i;

    cout << "Enter the number of elements in the array: ";
    cin >> n;

    if (n <= 0) {
        cout << "Array size must be greater than zero." << endl;
        return 0;
    }

    int *A = new int[n];

    cout << "Enter the elements of the array: ";
    for (int j = 0; j < n; j++) {
        cin >> A[j];
    }

    cout << "Enter the value of i (1-based index): ";
    cin >> i;

    if (i > 0 && i <= n) {
        int result = RandomizedSelect(A, 0, n - 1, i);
        cout << "The " << i << "-th smallest element is: " << result << endl;
    } else {
        cout << "Invalid value of i. Please enter a value between 1 and " << n << "." << endl;
    }

    delete[] A;
    return 0;
}
