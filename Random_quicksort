#include <iostream>
#include <cstdlib>
using namespace std;

int comparisons = 0;

// Function declarations
int Partition(int A[], int p, int r);
int Randomized_Partition(int A[], int p, int r);
void QuickSort(int A[], int p, int r);
void Randomized_QuickSort(int A[], int p, int r);
void swap(int &a, int &b);

// QuickSort function
void QuickSort(int A[], int p, int r) {
    if (p < r) {
        int q = Partition(A, p, r); // Find pivot position
        QuickSort(A, p, q - 1);     // Sort left subarray
        QuickSort(A, q + 1, r);     // Sort right subarray
    }
}

// Randomized QuickSort function
void Randomized_QuickSort(int A[], int p, int r) {
    if (p < r) {
        int q = Randomized_Partition(A, p, r); // Find randomized pivot position
        Randomized_QuickSort(A, p, q - 1);     // Sort left subarray
        Randomized_QuickSort(A, q + 1, r);     // Sort right subarray
    }
}

// Partition function
int Partition(int A[], int p, int r) {
    int x = A[r]; // Pivot
    int i = p - 1;
    for (int j = p; j <= r - 1; j++) {
        comparisons++;
        if (A[j] <= x) {
            i = i + 1;
            swap(A[i], A[j]);
        }
    }
    swap(A[i + 1], A[r]);
    return i + 1;
}

// Randomized Partition function
int Randomized_Partition(int A[], int p, int r) {
    int i = p + rand() % (r - p + 1); // Randomly choose a pivot
    swap(A[r], A[i]);                // Swap the pivot with the last element
    return Partition(A, p, r);
}

// Swap function
void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}

int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    int *A = new int[n];
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> A[i];
    }

    cout << "Sorting using Randomized QuickSort...\n";
    Randomized_QuickSort(A, 0, n - 1);

    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << A[i] << " ";
    }
    cout << endl;

    cout << "Number of comparisons: " << comparisons << endl;

    delete[] A;
    return 0;
}
